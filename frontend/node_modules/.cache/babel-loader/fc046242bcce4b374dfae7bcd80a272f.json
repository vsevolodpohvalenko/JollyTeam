{"ast":null,"code":"import { GET_ERRORS } from './ErrorsReducer';\nimport { createMessage } from './MessageReducer';\nimport { authAPI } from \"../../api\";\nconst USER_LOADING = 'USER_LOADING';\nconst USER_LOADED = 'USER_LOADED';\nconst AUTH_ERROR = 'AUTH_ERROR';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_FAIL = 'LOGIN_FAIL';\nconst REGISTER_FAIL = 'REGISTER_FAIL';\nconst LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nconst FORGOT = 'FORGOT';\nconst RESET_CODE = 'RESET_CODE';\nlet initialState = {\n  token: localStorage.getItem('token'),\n  isAuthenticated: null,\n  isLoading: false,\n  user: null,\n  forgot: false,\n  code: null\n};\nexport const AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case USER_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case USER_LOADED:\n      return { ...state,\n        isAuthenticated: true,\n        isLoading: false,\n        user: action.payload\n      };\n\n    case AUTH_ERROR:\n      localStorage.removeItem('token');\n      return { ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false\n      };\n\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      debugger;\n      localStorage.setItem('token', action.payload.auth_token);\n      return { ...state,\n        ...action.payload,\n        isAuthenticated: true,\n        isLoading: false\n      };\n\n    case LOGOUT_SUCCESS:\n    case REGISTER_FAIL:\n    case LOGIN_FAIL:\n      localStorage.removeItem('token');\n      return { ...state,\n        token: null,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      };\n\n    case FORGOT:\n      return { ...state,\n        forgot: true\n      };\n\n    case RESET_CODE:\n      return { ...state,\n        code: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst loadUserSuccess = () => ({\n  type: USER_LOADING\n});\n\nconst loginSuccess = payload => ({\n  type: LOGIN_SUCCESS,\n  payload\n});\n\nconst getUserSuccess = payload => ({\n  type: USER_LOADED,\n  payload\n});\n\nconst logoutSuccess = () => ({\n  type: LOGOUT_SUCCESS\n});\n\nconst forgotSuccess = () => ({\n  type: FORGOT\n});\n\nexport const loadUser = () => async (dispatch, getState) => {\n  dispatch(loadUserSuccess());\n  const response = await authAPI.getUser(tokenConfig(getState));\n  dispatch(getUserSuccess(response.data));\n};\nexport const logout = () => async (dispatch, getState) => {\n  await authAPI.logout(tokenConfig(getState));\n  dispatch(logoutSuccess);\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    let response = await authAPI.login(body, config);\n    dispatch(loginSuccess(response.data));\n    dispatch(createMessage({\n      logined: \"Loggined successful\"\n    }));\n  } catch (err) {\n    const errors = {\n      msg: err.response.data,\n      status: err.response.status\n    };\n    dispatch({\n      type: GET_ERRORS,\n      payload: errors\n    });\n  }\n};\nexport const forgotpassword = body => async dispatch => {\n  await authAPI.forgot_password(body);\n  dispatch(forgotSuccess());\n};\nexport const register = ({\n  email,\n  first_name,\n  last_name,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    password,\n    email\n  });\n\n  try {\n    const response = await authAPI.register(body, config);\n    dispatch(loginSuccess(response.data));\n    dispatch(createMessage({\n      registred: \"registred successful\"\n    }));\n  } catch (err) {\n    const error = {\n      msg: err.response.data,\n      status: err.response.status\n    };\n    dispatch({\n      payload: error,\n      type: GET_ERRORS\n    });\n  }\n};\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/vsevolod/Desktop/Test-Django/frontend/src/redux/reducers/AuthReducer.jsx"],"names":["GET_ERRORS","createMessage","authAPI","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","FORGOT","RESET_CODE","initialState","token","localStorage","getItem","isAuthenticated","isLoading","user","forgot","code","AuthReducer","state","action","type","payload","removeItem","setItem","auth_token","loadUserSuccess","loginSuccess","getUserSuccess","logoutSuccess","forgotSuccess","loadUser","dispatch","getState","response","getUser","tokenConfig","data","logout","login","email","password","config","headers","body","JSON","stringify","logined","err","errors","msg","status","forgotpassword","forgot_password","register","first_name","last_name","registred","error","auth"],"mappings":"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","sourcesContent":["import {GET_ERRORS} from './ErrorsReducer'\nimport {createMessage} from './MessageReducer'\nimport {authAPI} from \"../../api\"\n\nconst USER_LOADING = 'USER_LOADING'\nconst USER_LOADED = 'USER_LOADED'\nconst AUTH_ERROR = 'AUTH_ERROR'\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS'\nconst LOGIN_FAIL = 'LOGIN_FAIL'\nconst REGISTER_FAIL = 'REGISTER_FAIL'\nconst LOGOUT_SUCCESS = 'LOGOUT_SUCCESS'\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS'\nconst FORGOT = 'FORGOT'\nconst RESET_CODE = 'RESET_CODE'\n\n\nlet initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    isLoading: false,\n    user: null,\n    forgot: false,\n    code: null\n}\n\nexport const AuthReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case USER_LOADING :\n            return {...state, isLoading: true}\n        case USER_LOADED:\n            return {...state, isAuthenticated: true, isLoading: false, user: action.payload}\n        case AUTH_ERROR:\n            localStorage.removeItem('token');\n            return {...state, user: null, token: null, isAuthenticated: false, isLoading: false}\n        case LOGIN_SUCCESS:\n        case REGISTER_SUCCESS:\n\n            debugger\n            localStorage.setItem('token', action.payload.auth_token)\n            return {\n                ...state, ...action.payload, isAuthenticated: true, isLoading: false\n            }\n        case LOGOUT_SUCCESS:\n        case REGISTER_FAIL:\n        case LOGIN_FAIL:\n            localStorage.removeItem('token');\n            return {...state, token: null, user: null, isAuthenticated: false, isLoading: false}\n        case FORGOT:\n            return {...state, forgot: true}\n        case RESET_CODE:\n            return {...state, code: action.payload}\n        default:\n            return state\n    }\n}\n\nconst loadUserSuccess = () => ({type: USER_LOADING})\nconst loginSuccess = (payload) => ({type: LOGIN_SUCCESS, payload})\nconst getUserSuccess = (payload) => ({type: USER_LOADED, payload})\nconst logoutSuccess = () => ({type: LOGOUT_SUCCESS})\nconst forgotSuccess = () => ({type: FORGOT})\n\nexport const loadUser = () => async (dispatch, getState) => {\n    dispatch(loadUserSuccess());\n\n    const response = await authAPI.getUser(tokenConfig(getState))\n    dispatch(getUserSuccess(response.data));\n}\n\nexport const logout = () => async (dispatch, getState) => {\n\n    await authAPI.logout(tokenConfig(getState))\n    dispatch(logoutSuccess);\n}\n\nexport const login = (email, password) => async (dispatch) => {\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n\n        }\n    }\n\n    const body = JSON.stringify({email, password})\n    try {\n        let response = await authAPI.login(body, config)\n        dispatch(loginSuccess(response.data))\n        dispatch(createMessage({logined: \"Loggined successful\"}))\n    } catch (err) {\n        const errors = {\n            msg: err.response.data,\n            status: err.response.status\n        }\n        dispatch({\n            type: GET_ERRORS,\n            payload: errors\n        })\n\n\n    }\n}\nexport const forgotpassword = (body) => async dispatch => {\n\n    await authAPI.forgot_password(body)\n    dispatch(forgotSuccess())\n}\n\nexport const register = ({email, first_name, last_name, password}) => async (dispatch) => {\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({first_name, last_name, password, email})\n    try {\n        const response = await authAPI.register(body, config)\n        dispatch(loginSuccess(response.data))\n        dispatch(\n            createMessage({registred: \"registred successful\"}))\n    } catch (err) {\n        const error = {\n            msg: err.response.data,\n            status: err.response.status\n        }\n        dispatch({\n            payload: error,\n            type: GET_ERRORS\n        })\n\n    }\n}\n\n\nexport const tokenConfig = getState => {\n    const token = getState().auth.token;\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    if (token) {\n        config.headers['Authorization'] = `Token ${token}`;\n    }\n\n\n    return config\n}"]},"metadata":{},"sourceType":"module"}