{"ast":null,"code":"import axios from \"axios\";\nimport { returnErrors } from \"./ErrorsReducer\"; //import {authAPI} from \"../../api\"\n\nconst USER_LOADING = 'USER_LOADING';\nconst USER_LOADED = 'USER_LOADED';\nconst AUTH_ERROR = 'AUTH_ERROR';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_FAIL = 'LOGIN_FAIL';\nlet initialState = {\n  token: localStorage.getItem('token'),\n  isAuthenticated: null,\n  isLoading: false,\n  user: null\n};\nexport const AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case USER_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case USER_LOADED:\n      return { ...state,\n        isAuthenticated: true,\n        isLoading: false,\n        user: action.payload\n      };\n\n    case AUTH_ERROR:\n      localStorage.removeItem('token');\n      return { ...state,\n        token: null,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      };\n\n    case LOGIN_SUCCESS:\n      debugger;\n      localStorage.setItem('token', action.payload.token);\n      return { ...state,\n        ...action.payload,\n        isAuthenticated: true,\n        isLoading: false\n      };\n\n    case LOGIN_FAIL:\n      localStorage.removeItem('token');\n      return { ...state,\n        token: null,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst loginSuccess = payload => {\n  type: LOGIN_SUCCESS, payload;\n};\n\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n\n  axios.get('/api/auth/get_users', config).then(response => {\n    dispatch({\n      type: USER_LOADED,\n      payload: response.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const login = (username, password) => async dispatch => {\n  debugger;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  const response = await axios.post('http://127.0.0.1:8000/api/auth/login', body, config);\n  dispatch(loginSuccess(response.data));\n};","map":{"version":3,"sources":["/home/vsevolod/Desktop/TextileSpot. REACT/textilespot./src/redux/reducers/AuthReducer.jsx"],"names":["axios","returnErrors","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","initialState","token","localStorage","getItem","isAuthenticated","isLoading","user","AuthReducer","state","action","type","payload","removeItem","setItem","loginSuccess","loadUser","dispatch","getState","auth","config","headers","get","then","response","data","catch","err","status","login","username","password","body","JSON","stringify","post"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport { returnErrors } from \"./ErrorsReducer\"\n\n//import {authAPI} from \"../../api\"\nconst USER_LOADING = 'USER_LOADING'\nconst USER_LOADED = 'USER_LOADED'\nconst AUTH_ERROR = 'AUTH_ERROR'\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS'\nconst LOGIN_FAIL = 'LOGIN_FAIL'\n\n\n\n\nlet initialState ={\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    isLoading: false,\n    user: null\n}\n\nexport const AuthReducer = (state=initialState, action) =>{\n    switch (action.type) {\n        case USER_LOADING :\n            return {...state, isLoading: true}\n        case USER_LOADED:\n            return {...state, isAuthenticated: true, isLoading: false, user: action.payload}\n        case AUTH_ERROR:\n            localStorage.removeItem('token');\n            return {...state, token: null, user:null, isAuthenticated: false, isLoading: false}\n        case LOGIN_SUCCESS:\n            debugger\n            localStorage.setItem('token', action.payload.token)\n            return {...state, ...action.payload, isAuthenticated: true, isLoading: false\n            }\n        case LOGIN_FAIL:\n            localStorage.removeItem('token');\n            return {...state, token: null, user:null, isAuthenticated: false, isLoading: false}\n        default:\n             return state\n    }\n}\n\nconst loginSuccess= (payload) => {type: LOGIN_SUCCESS, payload}\nexport const loadUser = () => (dispatch, getState) => {\n    dispatch({type: USER_LOADING});\n\n\n    const token = getState().auth.token;\n\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    if(token){\n        config.headers['Authorization'] = `Token ${token}`;\n    }\n    axios.get('/api/auth/get_users', config)\n    .then(response => {\n        dispatch({\n            type: USER_LOADED,\n            payload: response.data\n        });\n    }).catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status));\n        dispatch({\n            type: AUTH_ERROR\n        })\n    })\n}\nexport const login = (username, password) => async dispatch => {\n    debugger\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({username, password})\n    const response = await axios.post('http://127.0.0.1:8000/api/auth/login', body, config)\n    dispatch(loginSuccess(response.data));\n    }"]},"metadata":{},"sourceType":"module"}