{"ast":null,"code":"import { faqAPI } from \"../../api/FaqApi\";\nconst ACTIVE_ITEM = \"ACTIVE_ITEM\";\nconst GET_FAQ_GROUPS = \"GET-FAQ-GROUPS\";\nconst GET_FAQ_ITEM = \"GET-FAQ-ITEM\";\nconst MAKE_ACTIVE = \"MAKE_ACTIVE\";\nlet initialState = {\n  groups: [],\n  items: [],\n  active_item: null\n};\nexport const FAQReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_FAQ_GROUPS:\n      return { ...state,\n        groups: action.payload\n      };\n\n    case ACTIVE_ITEM:\n      return { ...state,\n        active_item: action.payload\n      };\n\n    case GET_FAQ_ITEM:\n      return { ...state,\n        items: action.payload\n      };\n\n    case MAKE_ACTIVE:\n      return { ...state,\n        active_item: { ...state.active_item,\n          Active: !state.active_item.Active\n        }\n      };\n\n    default:\n      return state;\n  }\n};\nconst actions = {\n  getFaqGroupsSuccess: payload => ({\n    type: GET_FAQ_GROUPS,\n    payload\n  }),\n  getFaqItemsSuccess: payload => ({\n    type: GET_FAQ_ITEM,\n    payload\n  }),\n  activeIdSuccess: item => ({\n    type: ACTIVE_ITEM,\n    payload: item\n  })\n};\nexport const getFaqGroups = () => async dispatch => {\n  let response = await faqAPI.getFaq_Group();\n  debugger;\n  dispatch(actions.getFaqGroupsSuccess(response.data));\n};\nexport const ActiveId = item => async dispatch => {\n  debugger;\n  await faqAPI.active_Item(item);\n  faqAPI.getFaq_Item();\n  dispatch(actions.activeIdSuccess(item));\n  dispatch({\n    type: MAKE_ACTIVE\n  });\n};\nexport const getFaqItems = () => async dispatch => {\n  let response = await faqAPI.getFaq_Item();\n  dispatch(actions.getFaqItemsSuccess(response.data));\n};","map":{"version":3,"sources":["/home/seva/Desktop/textilespot-master/frontend/src/redux/reducers/FAQReducer.tsx"],"names":["faqAPI","ACTIVE_ITEM","GET_FAQ_GROUPS","GET_FAQ_ITEM","MAKE_ACTIVE","initialState","groups","items","active_item","FAQReducer","state","action","type","payload","Active","actions","getFaqGroupsSuccess","getFaqItemsSuccess","activeIdSuccess","item","getFaqGroups","dispatch","response","getFaq_Group","data","ActiveId","active_Item","getFaq_Item","getFaqItems"],"mappings":"AAEA,SAAQA,MAAR,QAAqB,kBAArB;AAEA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,WAAW,GAAG,aAApB;AAQA,IAAIC,YAA0B,GAAG;AAC7BC,EAAAA,MAAM,EAAE,EADqB;AAE7BC,EAAAA,KAAK,EAAE,EAFsB;AAG7BC,EAAAA,WAAW,EAAE;AAHgB,CAAjC;AAMA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkD;AACxE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,cAAL;AACI,aAAO,EAAC,GAAGQ,KAAJ;AAAWJ,QAAAA,MAAM,EAAEK,MAAM,CAACE;AAA1B,OAAP;;AACJ,SAAKZ,WAAL;AACI,aAAO,EAAC,GAAGS,KAAJ;AAAWF,QAAAA,WAAW,EAAEG,MAAM,CAACE;AAA/B,OAAP;;AACJ,SAAKV,YAAL;AACI,aAAO,EAAC,GAAGO,KAAJ;AAAWH,QAAAA,KAAK,EAAEI,MAAM,CAACE;AAAzB,OAAP;;AACJ,SAAKT,WAAL;AACI,aAAO,EAAC,GAAGM,KAAJ;AAAWF,QAAAA,WAAW,EAAE,EAAC,GAAGE,KAAK,CAACF,WAAV;AAAuBM,UAAAA,MAAM,EAAE,CAACJ,KAAK,CAACF,WAAN,CAAkBM;AAAlD;AAAxB,OAAP;;AACJ;AACI,aAAOJ,KAAP;AAVR;AAYH,CAbM;AAgBP,MAAMK,OAAkD,GAAG;AAC3DC,EAAAA,mBAAmB,EAAIH,OAAD,KAAkE;AAACD,IAAAA,IAAI,EAAEV,cAAP;AAAuBW,IAAAA;AAAvB,GAAlE,CADqC;AAE3DI,EAAAA,kBAAkB,EAAIJ,OAAD,KAMG;AAACD,IAAAA,IAAI,EAAET,YAAP;AAAqBU,IAAAA;AAArB,GANH,CAFsC;AAS3DK,EAAAA,eAAe,EAAIC,IAAD,KAGK;AAACP,IAAAA,IAAI,EAAEX,WAAP;AAAoBY,IAAAA,OAAO,EAAEM;AAA7B,GAHL;AATyC,CAA3D;AAcA,OAAO,MAAMC,YAAY,GAAG,MAAgB,MAAOC,QAAP,IAAoB;AAC5D,MAAIC,QAAQ,GAAG,MAAMtB,MAAM,CAACuB,YAAP,EAArB;AACA;AACAF,EAAAA,QAAQ,CAACN,OAAO,CAACC,mBAAR,CAA4BM,QAAQ,CAACE,IAArC,CAAD,CAAR;AACH,CAJM;AAKP,OAAO,MAAMC,QAAQ,GAAIN,IAAD,IAA0B,MAAOE,QAAP,IAAoB;AAClE;AACA,QAAOrB,MAAM,CAAC0B,WAAP,CAAmBP,IAAnB,CAAP;AACAnB,EAAAA,MAAM,CAAC2B,WAAP;AACAN,EAAAA,QAAQ,CAACN,OAAO,CAACG,eAAR,CAAwBC,IAAxB,CAAD,CAAR;AACAE,EAAAA,QAAQ,CAAC;AAACT,IAAAA,IAAI,EAAER;AAAP,GAAD,CAAR;AACH,CANM;AAQP,OAAO,MAAMwB,WAAW,GAAG,MAAgB,MAAOP,QAAP,IAAoB;AAC3D,MAAIC,QAAQ,GAAG,MAAMtB,MAAM,CAAC2B,WAAP,EAArB;AACAN,EAAAA,QAAQ,CAACN,OAAO,CAACE,kBAAR,CAA2BK,QAAQ,CAACE,IAApC,CAAD,CAAR;AACH,CAHM","sourcesContent":["import {ThunkAction} from \"redux-thunk\";\nimport {AppStateType, InferActionsTypes} from \"../redux_store\";\nimport {faqAPI} from \"../../api/FaqApi\";\n\nconst ACTIVE_ITEM = \"ACTIVE_ITEM\"\nconst GET_FAQ_GROUPS = \"GET-FAQ-GROUPS\"\nconst GET_FAQ_ITEM = \"GET-FAQ-ITEM\"\nconst MAKE_ACTIVE = \"MAKE_ACTIVE\"\n\ntype initialState = {\n    groups: Array<string | number>,\n    items: Array<any>\n    active_item: any\n}\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, FaqActionTypes>\nlet initialState: initialState = {\n    groups: [],\n    items: [],\n    active_item: null\n}\n\nexport const FAQReducer = (state = initialState, action: FaqActionTypes) => {\n    switch (action.type) {\n        case GET_FAQ_GROUPS:\n            return {...state, groups: action.payload}\n        case ACTIVE_ITEM:\n            return {...state, active_item: action.payload}\n        case GET_FAQ_ITEM:\n            return {...state, items: action.payload}\n        case MAKE_ACTIVE:\n            return {...state, active_item: {...state.active_item, Active: !state.active_item.Active}}\n        default:\n            return state\n    }\n}\n\nexport type FaqActionTypes = InferActionsTypes<typeof actions>\nconst actions: { [key: string]: (...args: any) => any; } = {\ngetFaqGroupsSuccess : (payload: Array<{Title: string, id: number}>): FaqActionTypes => ({type: GET_FAQ_GROUPS, payload}),\ngetFaqItemsSuccess : (payload: Array<{\n        id: number,\n        Title: string,\n        Answer: string,\n        Active: boolean,\n        Group: string\n}>): FaqActionTypes => ({type: GET_FAQ_ITEM, payload}),\nactiveIdSuccess : (item: {\n        id: number,\n        Title: string\n}): FaqActionTypes => ({type: ACTIVE_ITEM, payload: item})}\n\nexport const getFaqGroups = ():ThunkType => async (dispatch) => {\n    let response = await faqAPI.getFaq_Group()\n    debugger\n    dispatch(actions.getFaqGroupsSuccess(response.data))\n}\nexport const ActiveId = (item: any):ThunkType  => async (dispatch) => {\n    debugger\n    await  faqAPI.active_Item(item)\n    faqAPI.getFaq_Item()\n    dispatch(actions.activeIdSuccess(item))\n    dispatch({type: MAKE_ACTIVE})\n}\n\nexport const getFaqItems = ():ThunkType => async (dispatch) => {\n    let response = await faqAPI.getFaq_Item()\n    dispatch(actions.getFaqItemsSuccess(response.data))\n}\n"]},"metadata":{},"sourceType":"module"}