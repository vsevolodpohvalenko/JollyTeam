{"ast":null,"code":"import { authAPI } from \"../../api\";\nconst USER_LOADING = 'USER_LOADING';\nconst USER_LOADED = 'USER_LOADED';\nconst AUTH_ERROR = 'AUTH_ERROR';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_FAIL = 'LOGIN_FAIL';\nconst REGISTER_FAIL = 'REGISTER_FAIL';\nconst LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nlet initialState = {\n  token: localStorage.getItem('token'),\n  isAuthenticated: null,\n  isLoading: false,\n  user: null\n};\nexport const AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case USER_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case USER_LOADED:\n      return { ...state,\n        isAuthenticated: true,\n        isLoading: false,\n        user: action.payload\n      };\n\n    case AUTH_ERROR:\n      localStorage.removeItem('token');\n      return { ...state,\n        token: null,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      };\n\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      debugger;\n      localStorage.setItem('token', action.payload.token);\n      return { ...state,\n        ...action.payload,\n        isAuthenticated: true,\n        isLoading: false\n      };\n\n    case LOGOUT_SUCCESS:\n    case REGISTER_FAIL:\n    case LOGIN_FAIL:\n      localStorage.removeItem('token');\n      return { ...state,\n        token: null,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst loadUserSuccess = () => ({\n  type: USER_LOADING\n});\n\nconst loginSuccess = payload => ({\n  type: LOGIN_SUCCESS,\n  payload\n});\n\nconst getUserSuccess = payload => ({\n  type: USER_LOADED,\n  payload\n});\n\nconst logoutSuccess = () => ({\n  type: LOGOUT_SUCCESS\n});\n\nexport const loadUser = () => async (dispatch, getState) => {\n  dispatch(loadUserSuccess());\n  const response = await authAPI.getUser(tokenConfig(getState));\n  dispatch(getUserSuccess(response.data));\n};\nexport const logout = () => async (dispatch, getState) => {\n  await authAPI.logout(tokenConfig(getState));\n  dispatch(logoutSuccess);\n};\nexport const login = (email, password) => dispatch => {\n  debugger;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  authAPI.login(body, config).then(response => {\n    debugger;\n    dispatch(loginSuccess(response.data));\n  });\n};\nexport const register = ({\n  email,\n  first_name,\n  last_name,\n  password\n}) => async dispatch => {\n  debugger;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    password,\n    email\n  });\n  const response = await authAPI.register(body, config);\n  dispatch(loginSuccess(response.data));\n};\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/vsevolod/Desktop/TextileSpot. API/client/textilespot./src/redux/reducers/AuthReducer.jsx"],"names":["authAPI","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","initialState","token","localStorage","getItem","isAuthenticated","isLoading","user","AuthReducer","state","action","type","payload","removeItem","setItem","loadUserSuccess","loginSuccess","getUserSuccess","logoutSuccess","loadUser","dispatch","getState","response","getUser","tokenConfig","data","logout","login","email","password","config","headers","body","JSON","stringify","then","register","first_name","last_name","auth"],"mappings":"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","sourcesContent":["\n\nimport {authAPI} from \"../../api\"\nconst USER_LOADING = 'USER_LOADING'\nconst USER_LOADED = 'USER_LOADED'\nconst AUTH_ERROR = 'AUTH_ERROR'\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS'\nconst LOGIN_FAIL = 'LOGIN_FAIL'\nconst REGISTER_FAIL = 'REGISTER_FAIL'\nconst LOGOUT_SUCCESS = 'LOGOUT_SUCCESS'\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS'\n\n\n\n\nlet initialState ={\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    isLoading: false,\n    user: null\n}\n\nexport const AuthReducer = (state=initialState, action) =>{\n    switch (action.type) {\n        case USER_LOADING :\n            return {...state, isLoading: true}\n        case USER_LOADED:\n            return {...state, isAuthenticated: true, isLoading: false, user: action.payload}\n        case AUTH_ERROR:\n            localStorage.removeItem('token');\n            return {...state, token: null, user:null, isAuthenticated: false, isLoading: false}\n        case LOGIN_SUCCESS:\n        case REGISTER_SUCCESS:\n        \n            debugger\n            localStorage.setItem('token', action.payload.token)\n            return {...state, ...action.payload, isAuthenticated: true, isLoading: false\n            }\n        case LOGOUT_SUCCESS:\n        case REGISTER_FAIL:\n        case LOGIN_FAIL:\n            localStorage.removeItem('token');\n            return {...state, token: null, user:null, isAuthenticated: false, isLoading: false}\n        default:\n             return state\n    }\n}\n\nconst loadUserSuccess = () => ({type: USER_LOADING})\nconst loginSuccess = (payload) => ({type: LOGIN_SUCCESS, payload})\nconst getUserSuccess = (payload) => ({type: USER_LOADED, payload})\nconst logoutSuccess = () => ({type: LOGOUT_SUCCESS})\n\nexport const loadUser = () => async (dispatch, getState) => {\n    dispatch(loadUserSuccess());\n\n    const response = await authAPI.getUser(tokenConfig(getState))\n        dispatch(getUserSuccess(response.data));\n    }\n\nexport const logout = () => async (dispatch, getState) => {\n    await authAPI.logout(tokenConfig(getState))\n        dispatch(logoutSuccess);\n    }\nexport const login = (email, password) => (dispatch) => {\n    debugger\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({email, password})\n    authAPI.login(body, config)\n    .then(response => {\n        debugger\n        dispatch(loginSuccess(response.data));\n    })\n}\n\nexport const register = ({ email, first_name, last_name,  password}) => async (dispatch) => {\n    debugger\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({first_name, last_name, password, email})\n    const response = await authAPI.register(body, config)\n        dispatch(loginSuccess(response.data));\n}\n\nexport const tokenConfig = getState => {\n        const token = getState().auth.token;\n    \n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n    \n        if(token){\n            config.headers['Authorization'] = `Token ${token}`;\n        }\n\n\n        return config\n}"]},"metadata":{},"sourceType":"module"}