{"ast":null,"code":"import axios from \"axios\";\nimport { config2 } from \"../api\";\nexport const instance = axios.create({\n  baseURL: 'http://127.0.0.1:8000/'\n});\nexport const profileAPI = {\n  PostProfile: id => {\n    debugger;\n    let form_data = new FormData();\n    form_data.append('owner', String(id));\n    return instance.post('api/manufacturerProfilePage/', form_data, config2);\n  },\n  PutProfile: (form_data, id) => {\n    debugger;\n    return instance.patch(`api/manufacturerProfilePage/${id}/`, form_data, config2);\n  },\n  PatchDocuments: (form_data, id) => {\n    return instance.patch(`api/Document/${id + 1}/`, form_data, config2);\n  },\n  PostDocuments: id => {\n    let form_data = new FormData();\n    form_data.append('owner', String(id));\n    return instance.post(`api/Document/`, form_data, config2);\n  },\n  DeleteDocuments: id => {\n    return instance.delete(`api/Document/${id + 1}`);\n  },\n  getCountries: () => {\n    return axios.get('http://restcountries.eu/rest/v2/all');\n  },\n  getProfile: () => {\n    return instance.get('api/manufacturerProfilePage');\n  },\n  getDocuments: () => {\n    debugger;\n    return instance.get('api/Document/');\n  },\n  getCategory: () => {\n    return instance.get(\"api/Category/\");\n  },\n  getSearchedData: search => {\n    debugger;\n    return instance.get(`manufacturerProfilePage?search=${search}`);\n  },\n  postRequestForQuotations: request => {\n    return instance.post('api/RequestForQuotation/', request);\n  }\n};","map":{"version":3,"sources":["/home/seva/Desktop/textilespot-master/frontend/src/api/profileApi.ts"],"names":["axios","config2","instance","create","baseURL","profileAPI","PostProfile","id","form_data","FormData","append","String","post","PutProfile","patch","PatchDocuments","PostDocuments","DeleteDocuments","delete","getCountries","get","getProfile","getDocuments","getCategory","getSearchedData","search","postRequestForQuotations","request"],"mappings":"AAAA,OAAOA,KAAP,MAAkC,OAAlC;AAGA,SAAQC,OAAR,QAAsB,QAAtB;AAoBA,OAAO,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAE;AADwB,CAAb,CAAjB;AAGP,OAAO,MAAMC,UAAU,GAAG;AAEvBC,EAAAA,WAAW,EAAGC,EAAD,IAAgB;AACzB;AACA,QAAIC,SAAS,GAAG,IAAIC,QAAJ,EAAhB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,OAAjB,EAA0BC,MAAM,CAACJ,EAAD,CAAhC;AACA,WAAOL,QAAQ,CAACU,IAAT,CAA6B,8BAA7B,EAA6DJ,SAA7D,EAAwEP,OAAxE,CAAP;AACH,GAPsB;AASvBY,EAAAA,UAAU,EAAE,CAACL,SAAD,EASRD,EATQ,KASO;AACd;AACA,WAAOL,QAAQ,CAACY,KAAT,CAA+B,+BAA8BP,EAAG,GAAhE,EAAoEC,SAApE,EAA+EP,OAA/E,CAAP;AACH,GArBqB;AAsBtBc,EAAAA,cAAc,EAAE,CAACP,SAAD,EAMbD,EANa,KAME;AACd,WAAOL,QAAQ,CAACY,KAAT,CAAgC,gBAAeP,EAAE,GAAG,CAAE,GAAtD,EAA0DC,SAA1D,EAAqEP,OAArE,CAAP;AACH,GA9BqB;AA+BtBe,EAAAA,aAAa,EAAGT,EAAD,IAAa;AACxB,QAAIC,SAAS,GAAG,IAAIC,QAAJ,EAAhB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,OAAjB,EAA0BC,MAAM,CAACJ,EAAD,CAAhC;AACA,WAAOL,QAAQ,CAACU,IAAT,CAA+B,eAA/B,EAA+CJ,SAA/C,EAA0DP,OAA1D,CAAP;AACH,GAnCqB;AAoCtBgB,EAAAA,eAAe,EAAGV,EAAD,IAAgB;AAC7B,WAAOL,QAAQ,CAACgB,MAAT,CAA+B,gBAAeX,EAAE,GAAG,CAAE,EAArD,CAAP;AACH,GAtCqB;AAuCtBY,EAAAA,YAAY,EAAE,MAAM;AAChB,WAAOnB,KAAK,CAACoB,GAAN,CAAU,qCAAV,CAAP;AACH,GAzCqB;AA0CtBC,EAAAA,UAAU,EAAE,MAAM;AACd,WAAOnB,QAAQ,CAACkB,GAAT,CAAmC,6BAAnC,CAAP;AACH,GA5CqB;AA6CtBE,EAAAA,YAAY,EAAE,MAAM;AAChB;AACA,WAAOpB,QAAQ,CAACkB,GAAT,CAAoC,eAApC,CAAP;AACH,GAhDqB;AAiDtBG,EAAAA,WAAW,EAAE,MAAM;AACf,WAAOrB,QAAQ,CAACkB,GAAT,CAA6B,eAA7B,CAAP;AACH,GAnDqB;AAoDtBI,EAAAA,eAAe,EAAGC,MAAD,IAAoB;AACjC;AACA,WAAOvB,QAAQ,CAACkB,GAAT,CAAoC,kCAAiCK,MAAO,EAA5E,CAAP;AACH,GAvDqB;AAwDtBC,EAAAA,wBAAwB,EAAGC,OAAD,IAAkB;AACxC,WAAOzB,QAAQ,CAACU,IAAT,CAA0C,0BAA1C,EAAsEe,OAAtE,CAAP;AACH;AA1DqB,CAAnB","sourcesContent":["import axios, {AxiosPromise} from \"axios\";\nimport {CategoriesType} from \"../component/accounts/Profile/ProfileEdit/ProfileEditContainer\";\nimport {RequestForQuotation} from \"../Frequently_used_types\";\nimport {config2} from \"../api\";\n\ntype SingleDocument = {\n        id: number,\n        Title: string,\n        Thumbnail: string,\n        Download: string,\n        owner: number\n    }\ntype SingleProfile = {\n        id: number,\n        companyProfilePicture: string,\n        companyName: string,\n        companyDescription: string,\n        country: string,\n        companyLogo: string,\n        sections: string,\n        owner: number\n    }\n\nexport const instance = axios.create({\n    baseURL: 'http://127.0.0.1:8000/',\n});\nexport const profileAPI = {\n\n   PostProfile: (id: number) => {\n       debugger\n       let form_data = new FormData();\n       form_data.append('owner', String(id));\n       return instance.post<SingleProfile>('api/manufacturerProfilePage/', form_data, config2)\n   },\n\n   PutProfile: (form_data: {\n       companyDescription: string,\n       companyLogo: string,\n       companyName: string,\n       companyProfilePicture: string,\n       country: string,\n       id: number,\n        owner: number,\n        sections: string\n    }, id: number) => {\n        debugger\n        return instance.patch<SingleProfile>(`api/manufacturerProfilePage/${id}/`, form_data, config2)\n    },\n    PatchDocuments: (form_data: {\n        Download: string,\n        Thumbnail: string,\n        Title: string,\n        id: number,\n        owner: number\n    }, id: number) => {\n        return instance.patch<SingleDocument>(`api/Document/${id + 1}/`, form_data, config2)\n    },\n    PostDocuments: (id: any) => {\n        let form_data = new FormData();\n        form_data.append('owner', String(id));\n        return instance.post<SingleDocument>(`api/Document/`, form_data, config2)\n    },\n    DeleteDocuments: (id: number) => {\n        return instance.delete<AxiosPromise>(`api/Document/${id + 1}`)\n    },\n    getCountries: () => {\n        return axios.get('http://restcountries.eu/rest/v2/all')\n    },\n    getProfile: () => {\n        return instance.get<Array<SingleProfile>>('api/manufacturerProfilePage')\n    },\n    getDocuments: () => {\n        debugger\n        return instance.get<Array<SingleDocument>>('api/Document/')\n    },\n    getCategory: () => {\n        return instance.get<CategoriesType>(\"api/Category/\")\n    },\n    getSearchedData: (search: string) => {\n        debugger\n        return instance.get<Array<SingleProfile>>(`manufacturerProfilePage?search=${search}`)\n    },\n    postRequestForQuotations: (request: any) => {\n        return instance.post<Array<RequestForQuotation>>('api/RequestForQuotation/', request)\n    }\n}"]},"metadata":{},"sourceType":"module"}