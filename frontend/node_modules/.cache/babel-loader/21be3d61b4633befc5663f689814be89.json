{"ast":null,"code":"import { contentAPI } from \"../../api/ContentApi\";\nconst GET_PAGE = 'GET-PAGE';\nconst GET_CONTENT = 'GET-CONTENT';\nconst initialState = {\n  content: null,\n  page: null\n};\nexport const ContentReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_CONTENT:\n      return { ...state,\n        content: action.payload\n      };\n\n    case GET_PAGE:\n      debugger;\n      return { ...state,\n        page: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst getContentSuccessful = content => ({\n  type: GET_CONTENT,\n  payload: content\n});\n\nexport const getContent = () => async dispatch => {\n  const response = await contentAPI.content();\n  dispatch(getContentSuccessful(response.data));\n};","map":{"version":3,"sources":["/home/seva/Desktop/textilespot-master/frontend/src/redux/reducers/ContentReducer.tsx"],"names":["contentAPI","GET_PAGE","GET_CONTENT","initialState","content","page","ContentReducer","state","action","type","payload","getContentSuccessful","getContent","dispatch","response","data"],"mappings":"AACA,SAAQA,UAAR,QAAyB,sBAAzB;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,WAAW,GAAG,aAApB;AAeA,MAAMC,YAAgC,GAAG;AACrCC,EAAAA,OAAO,EAAE,IAD4B;AAErCC,EAAAA,IAAI,EAAE;AAF+B,CAAzC;AAKA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAsD;AAChF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,WAAL;AACI,aAAO,EAAC,GAAGK,KAAJ;AAAWH,QAAAA,OAAO,EAAEI,MAAM,CAACE;AAA3B,OAAP;;AACJ,SAAKT,QAAL;AACI;AACA,aAAO,EAAC,GAAGM,KAAJ;AAAWF,QAAAA,IAAI,EAAEG,MAAM,CAACE;AAAxB,OAAP;;AACJ;AACI,aAAOH,KAAP;AAPR;AASH,CAVM;;AAYP,MAAMI,oBAAoB,GAAIP,OAAD,KAOd;AAACK,EAAAA,IAAI,EAAEP,WAAP;AAAoBQ,EAAAA,OAAO,EAAEN;AAA7B,CAPc,CAA7B;;AASA,OAAO,MAAMQ,UAAU,GAAG,MAAM,MAAOC,QAAP,IAAyB;AAErD,QAAMC,QAAQ,GAAG,MAAMd,UAAU,CAACI,OAAX,EAAvB;AACAS,EAAAA,QAAQ,CAACF,oBAAoB,CAACG,QAAQ,CAACC,IAAV,CAArB,CAAR;AACH,CAJM","sourcesContent":["import {ContentActionTypes} from \"./ContentTypes\";\nimport {contentAPI} from \"../../api/ContentApi\";\n\nconst GET_PAGE = 'GET-PAGE'\nconst GET_CONTENT = 'GET-CONTENT'\n\ntype initialContentType = {\n    content: Array<{\n        id: number,\n        Title: string,\n        BrowserTitle: string,\n        MetaDescription: string,\n        UrlSlug: string,\n        Content: string\n    }> | null,\n    page: Array<string> | any\n}\n\n\nconst initialState: initialContentType = {\n    content: null,\n    page: null\n};\n\nexport const ContentReducer = (state = initialState, action: ContentActionTypes) => {\n    switch (action.type) {\n        case GET_CONTENT:\n            return {...state, content: action.payload}\n        case GET_PAGE:\n            debugger\n            return {...state, page: action.payload}\n        default:\n            return state;\n    }\n}\n\nconst getContentSuccessful = (content: Array<{\n    id: number,\n    Title: string,\n    BrowserTitle: string,\n    MetaDescription: string,\n    UrlSlug: string,\n    Content: string\n}> | null) => ({type: GET_CONTENT, payload: content})\n\nexport const getContent = () => async (dispatch: any) => {\n\n    const response = await contentAPI.content()\n    dispatch(getContentSuccessful(response.data))\n}\n\n"]},"metadata":{},"sourceType":"module"}