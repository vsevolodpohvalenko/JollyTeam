{"ast":null,"code":"import { GET_ERRORS } from './ErrorsReducer';\nimport { createMessage } from './MessageReducer';\nimport { authAPI } from \"../../api\";\nimport { connect } from 'react-redux';\nconst USER_LOADING = 'USER_LOADING';\nconst USER_LOADED = 'USER_LOADED';\nconst AUTH_ERROR = 'AUTH_ERROR';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_FAIL = 'LOGIN_FAIL';\nconst REGISTER_FAIL = 'REGISTER_FAIL';\nconst LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nconst FORGOT = 'FORGOT';\nconst RESET_CODE = 'RESET_CODE';\nlet initialState = {\n  key: localStorage.getItem('key'),\n  isAuthenticated: null,\n  isLoading: false,\n  user: null,\n  forgot: false,\n  reset_code: null\n};\nexport const AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case USER_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case USER_LOADED:\n      return { ...state,\n        isAuthenticated: true,\n        isLoading: false,\n        user: action.payload\n      };\n\n    case AUTH_ERROR:\n      localStorage.removeItem('key');\n      return { ...state,\n        user: null,\n        key: null,\n        isAuthenticated: false,\n        isLoading: false\n      };\n\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      debugger;\n      localStorage.setItem('key', action.payload.key);\n      return { ...state,\n        ...action.payload,\n        isAuthenticated: true,\n        isLoading: false\n      };\n\n    case LOGOUT_SUCCESS:\n    case REGISTER_FAIL:\n    case LOGIN_FAIL:\n      localStorage.removeItem('key');\n      return { ...state,\n        key: null,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      };\n\n    case FORGOT:\n      return { ...state,\n        forgot: true\n      };\n\n    case RESET_CODE:\n      return { ...state,\n        reset_code: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst loadUserSuccess = () => ({\n  type: USER_LOADING\n});\n\nconst loginSuccess = payload => ({\n  type: LOGIN_SUCCESS,\n  payload\n});\n\nconst getUserSuccess = payload => ({\n  type: USER_LOADED,\n  payload\n});\n\nconst logoutSuccess = () => ({\n  type: LOGOUT_SUCCESS\n});\n\nconst forgotSuccess = () => ({\n  type: FORGOT\n});\n\nconst reset_codeSuccess = reset_code => ({\n  type: RESET_CODE,\n  payload: reset_code\n});\n\nexport const loadUser = () => async (dispatch, getState) => {\n  dispatch(loadUserSuccess());\n  const response = await authAPI.getUser(tokenConfig(getState));\n  dispatch(getUserSuccess(response.data));\n};\nexport const logout = () => async (dispatch, getState) => {\n  debugger;\n  await authAPI.logout(tokenConfig(getState));\n  dispatch(logoutSuccess);\n};\nexport const reset_code = reset_code => dispatch => {\n  dispatch(reset_codeSuccess(reset_code));\n};\nexport const login = (email, password) => async dispatch => {\n  debugger;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    let response = await authAPI.login(body, config);\n    dispatch(loginSuccess(response.data));\n    dispatch(createMessage({\n      logined: \"Loggined successful\"\n    }));\n  } catch (err) {\n    const errors = {\n      msg: err.response.data,\n      status: err.response.status\n    };\n    dispatch({\n      type: GET_ERRORS,\n      payload: errors\n    });\n  }\n};\nexport const forgotpassword = body => async dispatch => {\n  debugger;\n  await authAPI.forgot_password(body);\n  dispatch(forgotSuccess());\n};\nexport const register = ({\n  email,\n  first_name,\n  last_name,\n  password1,\n  password2\n}) => async dispatch => {\n  debugger;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    password1,\n    password2,\n    email\n  });\n\n  try {\n    const response = await authAPI.register(body, config);\n    dispatch(loginSuccess(response.data));\n    dispatch(createMessage({\n      registred: \"registred successful\"\n    }));\n  } catch (err) {\n    const error = {\n      msg: err.response.data,\n      status: err.response.status\n    };\n    dispatch({\n      payload: error,\n      type: GET_ERRORS\n    });\n  }\n};\nexport const tokenConfig = getState => {\n  const key = getState().auth.key;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (key) {\n    config.headers['Authorization'] = `Token ${key}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/vsevolod/Desktop/TextileSpot. API/client/textilespot./src/redux/reducers/AuthReducer.jsx"],"names":["GET_ERRORS","createMessage","authAPI","connect","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","FORGOT","RESET_CODE","initialState","key","localStorage","getItem","isAuthenticated","isLoading","user","forgot","reset_code","AuthReducer","state","action","type","payload","removeItem","setItem","loadUserSuccess","loginSuccess","getUserSuccess","logoutSuccess","forgotSuccess","reset_codeSuccess","loadUser","dispatch","getState","response","getUser","tokenConfig","data","logout","login","email","password","config","headers","body","JSON","stringify","logined","err","errors","msg","status","forgotpassword","forgot_password","register","first_name","last_name","password1","password2","registred","error","auth"],"mappings":"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","sourcesContent":["import {GET_ERRORS} from './ErrorsReducer'\nimport {createMessage} from './MessageReducer'\nimport {authAPI} from \"../../api\"\nimport { connect } from 'react-redux'\nconst USER_LOADING = 'USER_LOADING'\nconst USER_LOADED = 'USER_LOADED'\nconst AUTH_ERROR = 'AUTH_ERROR'\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS'\nconst LOGIN_FAIL = 'LOGIN_FAIL'\nconst REGISTER_FAIL = 'REGISTER_FAIL'\nconst LOGOUT_SUCCESS = 'LOGOUT_SUCCESS'\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS'\nconst FORGOT = 'FORGOT'\nconst RESET_CODE = 'RESET_CODE'\n\n\n\n\n\nlet initialState ={\n    key: localStorage.getItem('key'),\n    isAuthenticated: null,\n    isLoading: false,\n    user: null,\n    forgot: false,\n    reset_code: null\n}\n\nexport const AuthReducer = (state=initialState, action) =>{\n    switch (action.type) {\n        case USER_LOADING :\n            return {...state, isLoading: true}\n        case USER_LOADED:\n            return {...state, isAuthenticated: true, isLoading: false, user: action.payload}\n        case AUTH_ERROR:\n            localStorage.removeItem('key');\n            return {...state,  user:null, key: null ,isAuthenticated: false, isLoading: false}\n        case LOGIN_SUCCESS:\n        case REGISTER_SUCCESS:\n        \n            debugger\n            localStorage.setItem('key', action.payload.key)\n            return {...state, ...action.payload, isAuthenticated: true, isLoading: false\n            }\n        case LOGOUT_SUCCESS:\n        case REGISTER_FAIL:\n        case LOGIN_FAIL:\n            localStorage.removeItem('key');\n            return {...state, key: null, user:null, isAuthenticated: false, isLoading: false}\n        case FORGOT: \n        return {...state, forgot: true}\n        case RESET_CODE:\n            return {...state, reset_code: action.payload}\n        default:\n             return state\n    }\n}\n\nconst loadUserSuccess = () => ({type: USER_LOADING})\nconst loginSuccess = (payload) => ({type: LOGIN_SUCCESS, payload})\nconst getUserSuccess = (payload) => ({type: USER_LOADED, payload})\nconst logoutSuccess = () => ({type: LOGOUT_SUCCESS})\nconst forgotSuccess = () => ({type: FORGOT})\nconst reset_codeSuccess = (reset_code) => ({type: RESET_CODE, payload:reset_code})\n\nexport const loadUser = () => async (dispatch, getState) => {\n    dispatch(loadUserSuccess());\n\n    const response = await authAPI.getUser(tokenConfig(getState))\n        dispatch(getUserSuccess(response.data));\n    }\n\nexport const logout = () => async (dispatch, getState) => {\n    debugger\n    await authAPI.logout(tokenConfig(getState))\n        dispatch(logoutSuccess);\n    }\nexport const reset_code = (reset_code) => dispatch => {\n    dispatch(reset_codeSuccess(reset_code))\n}\nexport const login = (email, password) => async (dispatch) => {\n    debugger\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n\n        }\n    }\n   \n    const body = JSON.stringify({email, password})\n    try {let response = await authAPI.login(body, config)\n    dispatch(loginSuccess(response.data))\n    dispatch(\n       createMessage({logined: \"Loggined successful\"}))\n    } catch(err){\n        const errors = {\n            msg: err.response.data,\n            status: err.response.status}\n            dispatch({\n                type: GET_ERRORS,\n                payload: errors\n            })\n        \n        \n    }\n}\nexport const forgotpassword = (body) => async dispatch => {\n    debugger\n    await authAPI.forgot_password(body)\n    dispatch(forgotSuccess())\n} \n\nexport const register = ({ email, first_name, last_name,  password1, password2}) => async (dispatch) => {\n    debugger\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({first_name, last_name, password1, password2, email})\n    try {const response = await authAPI.register(body, config)\n        dispatch(loginSuccess(response.data))\n        dispatch(\n            createMessage({registred: \"registred successful\"}))} catch(err){\n            const error = {\n                msg: err.response.data,\n                status: err.response.status}\n                dispatch({\n                    payload: error,\n                    type: GET_ERRORS\n                })\n\n        }\n}\n\n\nexport const tokenConfig = getState => {\n        const key = getState().auth.key;\n    \n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n    \n        if(key){\n            config.headers['Authorization'] = `Token ${key}`;\n        }\n\n\n        return config\n}"]},"metadata":{},"sourceType":"module"}