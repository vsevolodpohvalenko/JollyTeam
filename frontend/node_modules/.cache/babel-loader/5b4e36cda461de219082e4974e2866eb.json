{"ast":null,"code":"import { CREATE_MESSAGE } from \"./MessageReducer\";\nimport { profileAPI } from \"../../api/profileApi\";\nconst GET_COUNTRIES = \"GET_COUNTRIES\";\nconst GET_PROFILES = \"GET-PROFILES\";\nconst GET_DOCUMENTS = \"GET-DOCUMENTS\";\nconst GET_CATEGORY = \"GET-CATEGORY\";\nconst GET_SEARCHED_PROFILES = \"GET_SEARCHED_PROFILES\";\nexport let initialState = {\n  profiles: [],\n  countries: [],\n  documents: [],\n  category: []\n};\nexport const ProfileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_COUNTRIES:\n      return { ...state,\n        countries: action.payload\n      };\n\n    case GET_PROFILES:\n      return { ...state,\n        profiles: action.payload\n      };\n\n    case GET_DOCUMENTS:\n      return { ...state,\n        documents: action.payload\n      };\n\n    case GET_CATEGORY:\n      return { ...state,\n        category: action.payload\n      };\n\n    case GET_SEARCHED_PROFILES:\n      return { ...state,\n        profiles: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nconst actions = {\n  getCountriesSuccessful: payload => ({\n    type: GET_COUNTRIES,\n    payload\n  }),\n  getProfilesSuccessful: payload => ({\n    type: GET_PROFILES,\n    payload\n  }),\n  getDocumentsSuccessful: payload => ({\n    type: GET_DOCUMENTS,\n    payload\n  }),\n  getCategorySuccessful: payload => ({\n    type: GET_CATEGORY,\n    payload\n  }),\n  getSearchedProfiles: payload => ({\n    type: GET_SEARCHED_PROFILES,\n    payload\n  })\n};\nexport const GetCountries = () => async dispatch => {\n  const response = await profileAPI.getCountries();\n  dispatch(actions.getCountriesSuccessful(response.data));\n};\nexport const GetProfiles = () => async dispatch => {\n  const response = await profileAPI.getProfile();\n  dispatch(actions.getProfilesSuccessful(response.data));\n};\nexport const updateManufacturer = (data, id) => async dispatch => {\n  await profileAPI.PutProfile(data, id);\n  dispatch({\n    type: CREATE_MESSAGE,\n    payload: {\n      registered: \"Your Profile was Submitted!\"\n    }\n  });\n};\nexport const updateDocument = (data, id) => async dispatch => {\n  await profileAPI.PatchDocuments(data, id);\n  dispatch({\n    type: CREATE_MESSAGE,\n    payload: {\n      registered: \"Documents for your Profile were Submitted!\"\n    }\n  });\n};\nexport const postDocument = id => async dispatch => {\n  await profileAPI.PostDocuments(id);\n  const response = await profileAPI.getDocuments();\n  dispatch(actions.getDocumentsSuccessful(response.data));\n  dispatch({\n    type: CREATE_MESSAGE,\n    payload: {\n      registered: \"One more document was added\"\n    }\n  });\n};\nexport const GetDocuments = () => async dispatch => {\n  debugger;\n  const response = await profileAPI.getDocuments();\n  dispatch({\n    type: GET_DOCUMENTS,\n    payload: response.data\n  });\n};\nexport const GetCategory = () => async dispatch => {\n  const response = await profileAPI.getCategory();\n  dispatch(actions.getCategorySuccessful(response.data));\n};\nexport const GetSearchedData = search => async dispatch => {\n  debugger;\n  const response = await profileAPI.getSearchedData(search);\n  dispatch(actions.getSearchedProfiles(response.data));\n};","map":{"version":3,"sources":["/home/seva/Desktop/textilespot-master/frontend/src/redux/reducers/ProfileReducer.tsx"],"names":["CREATE_MESSAGE","profileAPI","GET_COUNTRIES","GET_PROFILES","GET_DOCUMENTS","GET_CATEGORY","GET_SEARCHED_PROFILES","initialState","profiles","countries","documents","category","ProfileReducer","state","action","type","payload","actions","getCountriesSuccessful","getProfilesSuccessful","getDocumentsSuccessful","getCategorySuccessful","getSearchedProfiles","GetCountries","dispatch","response","getCountries","data","GetProfiles","getProfile","updateManufacturer","id","PutProfile","registered","updateDocument","PatchDocuments","postDocument","PostDocuments","getDocuments","GetDocuments","GetCategory","getCategory","GetSearchedData","search","getSearchedData"],"mappings":"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","sourcesContent":["import {CREATE_MESSAGE} from \"./MessageReducer\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppStateType, InferActionsTypes} from \"../redux_store\";\nimport {Dispatch} from \"redux\";\nimport {profileAPI} from \"../../api/profileApi\";\n\nconst GET_COUNTRIES = \"GET_COUNTRIES\"\nconst GET_PROFILES = \"GET-PROFILES\"\nconst GET_DOCUMENTS = \"GET-DOCUMENTS\"\nconst GET_CATEGORY = \"GET-CATEGORY\"\nconst GET_SEARCHED_PROFILES = \"GET_SEARCHED_PROFILES\"\n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ProfileActionTypes>\n\nexport type initialStateType =  {\n    profiles: Array<{\n        id: number,\n        companyProfilePicture: string,\n        companyName: string,\n        companyDescription: string,\n        country: string,\n        companyLogo: string,\n        sections: string,\n        owner: number\n    }> | any,\n    countries: any,\n    documents: Array<{\n        id: number,\n        Title: string,\n        Thumbnail: string,\n        Download: string,\n        owner: number\n    }> | any,\n    category: any\n}\n\nexport let initialState: initialStateType = {\n    profiles: [],\n    countries: [],\n    documents: [],\n    category: []\n};\n\nexport const ProfileReducer = (state = initialState, action: ProfileActionTypes) => {\n    switch (action.type){\n        case GET_COUNTRIES:\n            return{...state, countries: action.payload}\n        case GET_PROFILES:\n            return {...state, profiles:  action.payload}\n        case GET_DOCUMENTS:\n            return {...state, documents:  action.payload}\n        case GET_CATEGORY:\n            return {...state, category: action.payload}\n        case GET_SEARCHED_PROFILES:\n            return {...state, profiles:  action.payload}\n        default: \n            return state \n         }\n    }\nexport type ProfileActionTypes = InferActionsTypes<typeof actions>\nconst actions: { [key: string]: (...args: any) => any; } = {\ngetCountriesSuccessful: (payload: any): ProfileActionTypes => ({type: GET_COUNTRIES, payload}),\ngetProfilesSuccessful: (payload: Array<{\n        id: number,\n        companyProfilePicture: string,\n        companyName: string,\n        companyDescription: string,\n        country: string,\n        companyLogo: string,\n        sections: string,\n        owner: number\n}>): ProfileActionTypes=> ({type: GET_PROFILES, payload}),\ngetDocumentsSuccessful: (payload: Array<{\n        id: number,\n        Title: any,\n        Thumbnail: any,\n        Download: any,\n        owner: number\n    }>): ProfileActionTypes => ({type: GET_DOCUMENTS, payload}),\ngetCategorySuccessful: (payload: Array<{\n        id: number,\n        Name: string\n}>): ProfileActionTypes => ({type: GET_CATEGORY, payload}),\ngetSearchedProfiles: (payload: Array<{\n        id: number,\n        companyProfilePicture: string,\n        companyName: string,\n        companyDescription: string,\n        country: string,\n        companyLogo: string,\n        sections: string,\n        owner: number\n}>): ProfileActionTypes => ({type: GET_SEARCHED_PROFILES, payload})}\n\nexport const GetCountries = (): ThunkType => async(dispatch) => {\n    const response = await profileAPI.getCountries()\n    dispatch(actions.getCountriesSuccessful(response.data))\n}\n\nexport const GetProfiles = (): ThunkType => async(dispatch) => {\n    const response = await profileAPI.getProfile()\n    dispatch(actions.getProfilesSuccessful(response.data))\n}\nexport const updateManufacturer = (data: any, id: number)=> async (dispatch: Dispatch<ProfileActionTypes>) => {\n    await profileAPI.PutProfile(data, id)\n    dispatch(\n            {\n                type: CREATE_MESSAGE,\n                payload: {registered: \"Your Profile was Submitted!\"}})\n}\nexport const updateDocument = (data: any, id: number) => async (dispatch: Dispatch<ProfileActionTypes>) => {\n    await profileAPI.PatchDocuments(data, id)\n    dispatch({\n        type: CREATE_MESSAGE,\n        payload: {registered: \"Documents for your Profile were Submitted!\"}})\n}\nexport const postDocument = (id: number): ThunkAction<Promise<void>, AppStateType, unknown, ProfileActionTypes> => async (dispatch) => {\n    await profileAPI.PostDocuments(id)\n    const response = await profileAPI.getDocuments()\n    dispatch(actions.getDocumentsSuccessful(response.data))\n    dispatch({\n        type: CREATE_MESSAGE,\n        payload: {registered: \"One more document was added\"}})\n\n}\nexport const GetDocuments = (): ThunkType => async(dispatch) => {\n    debugger\n    const response = await profileAPI.getDocuments()\n    dispatch({type: GET_DOCUMENTS, payload: response.data})\n}\n\nexport const GetCategory = (): ThunkType => async(dispatch) => {\n    const response = await profileAPI.getCategory()\n    dispatch(actions.getCategorySuccessful(response.data))\n}\n\nexport const GetSearchedData = (search: string): ThunkType => async(dispatch) => {\n    debugger\n    const response = await profileAPI.getSearchedData(search)\n    dispatch(actions.getSearchedProfiles(response.data))\n}"]},"metadata":{},"sourceType":"module"}