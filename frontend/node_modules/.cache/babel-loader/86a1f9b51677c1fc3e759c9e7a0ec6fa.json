{"ast":null,"code":"var _jsxFileName = \"/home/seva/Desktop/textilespot-master/frontend/src/component/FAQGroup.tsx\";\nimport React from 'react';\nimport { useQuery } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nconst QUERY_FAQGroup = gql`\n  query {\n    FAQGroup {\n        Title,\n        id\n    }\n}`;\nconst CREATE_FAQGroup = gql`\n  mutation createUser (Title: String!,){\n    createUser (Title: Title){\n       Title\n  }\n}\n`;\nexport const FAQInfo = () => {\n  debugger; // Polling: provides near-real-time synchronization with\n  // your server by causing a query to execute periodically\n  // at a specified interval\n\n  const {\n    data,\n    loading\n  } = useQuery(QUERY_FAQGroup, {\n    pollInterval: 500 // refetch the result every 0.5 second\n\n  }); // should handle loading status\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 23\n    }\n  }, \"Loading...\"); // @ts-ignore\n\n  return data.FAQGroup.map(({\n    title,\n    id\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    key: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"FaqGroup - \", id, \" \", title)));\n};","map":{"version":3,"sources":["/home/seva/Desktop/textilespot-master/frontend/src/component/FAQGroup.tsx"],"names":["React","useQuery","gql","QUERY_FAQGroup","CREATE_FAQGroup","FAQInfo","data","loading","pollInterval","FAQGroup","map","title","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAsC,cAAtC;AACA,SAASC,GAAT,QAAoB,cAApB;AAGA,MAAMC,cAAc,GAAGD,GAAI;;;;;;EAA3B;AAQA,MAAME,eAAe,GAAGF,GAAI;;;;;;CAA5B;AAQA,OAAO,MAAMG,OAAO,GAAG,MAAO;AAC1B,WAD0B,CAE5B;AACA;AACA;;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBN,QAAQ,CAChCE,cADgC,EAChB;AACdK,IAAAA,YAAY,EAAE,GADA,CACI;;AADJ,GADgB,CAAlC,CAL4B,CAW5B;;AACA,MAAID,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP,CAZe,CAc5B;;AACE,SAAOD,IAAI,CAACG,QAAL,CAAcC,GAAd,CAAkB,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,kBACzB;AAAK,IAAA,GAAG,EAAEA,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACcA,EADd,OACmBD,KADnB,CADF,CADO,CAAP;AAOH,CAtBM","sourcesContent":["import React from 'react';\nimport { useQuery, useMutation } from 'react-apollo';\nimport { gql } from 'apollo-boost';\n\n\nconst QUERY_FAQGroup = gql`\n  query {\n    FAQGroup {\n        Title,\n        id\n    }\n}`;\n\nconst CREATE_FAQGroup = gql`\n  mutation createUser (Title: String!,){\n    createUser (Title: Title){\n       Title\n  }\n}\n`;\n\nexport const FAQInfo = () =>  {\n    debugger\n  // Polling: provides near-real-time synchronization with\n  // your server by causing a query to execute periodically\n  // at a specified interval\n  const { data, loading } = useQuery(\n    QUERY_FAQGroup, {\n      pollInterval: 500 // refetch the result every 0.5 second\n    }\n  );\n\n  // should handle loading status\n  if (loading) return <p>Loading...</p>;\n\n  // @ts-ignore\n    return data.FAQGroup.map(({ title, id}) => (\n    <div key={id}>\n      <p>\n        FaqGroup - {id} {title}\n      </p>\n    </div>\n  ));\n}"]},"metadata":{},"sourceType":"module"}