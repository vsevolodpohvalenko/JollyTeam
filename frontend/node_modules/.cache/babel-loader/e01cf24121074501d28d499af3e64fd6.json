{"ast":null,"code":"import { GET_ERRORS } from './ErrorsReducer';\nimport { CREATE_MESSAGE } from \"./MessageReducer\";\nimport { createMessage } from './MessageReducer';\nimport { profileAPI } from \"../../api/profileApi\";\nimport { authAPI } from \"../../api/AuthApi\";\nconst USER_LOADING = 'USER_LOADING';\nconst USER_LOADED = 'USER_LOADED';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nconst ACTIVATE_USER = 'ACTIVATE_USER';\nexport let initialState = {\n  auth_token: localStorage.getItem('auth_token'),\n  isAuthenticated: null,\n  isLoading: false,\n  activated: 0,\n  user: JSON.parse(localStorage.getItem('user'))\n};\nexport const AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTIVATE_USER:\n      return { ...state,\n        activated: action.payload\n      };\n\n    case USER_LOADING:\n      return { ...state,\n        isLoading: !state.isLoading\n      };\n\n    case USER_LOADED:\n      localStorage.setItem('user', JSON.stringify(action.payload));\n      return { ...state,\n        isAuthenticated: true,\n        isLoading: false,\n        user: action.payload\n      };\n\n    case LOGIN_SUCCESS:\n      if (action.payload.auth_token != null) {\n        localStorage.setItem('auth_token', action.payload.auth_token);\n      }\n\n      return { ...state,\n        ...action.payload,\n        isAuthenticated: true,\n        isLoading: false\n      };\n\n    case REGISTER_SUCCESS:\n      return { ...state,\n        auth_token: null,\n        user: action.payload,\n        isLoading: false\n      };\n\n    case LOGOUT_SUCCESS:\n      debugger;\n      localStorage.removeItem('auth_token');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      return { ...state,\n        auth_token: null,\n        user: {\n          email: 'none@gmail.com',\n          id: 0,\n          first_name: 'none'\n        },\n        isAuthenticated: false,\n        isLoading: false\n      };\n\n    default:\n      return state;\n  }\n};\nexport const actions = {\n  loadUserSuccess: () => ({\n    type: USER_LOADING\n  }),\n  loginSuccess: payload => ({\n    type: LOGIN_SUCCESS,\n    payload\n  }),\n  getUserSuccess: payload => ({\n    type: USER_LOADED,\n    payload\n  }),\n  logoutSuccess: () => ({\n    type: LOGOUT_SUCCESS\n  }),\n  registerSuccess: user => ({\n    type: REGISTER_SUCCESS,\n    payload: user\n  }),\n  activatedSuccessful: payload => ({\n    type: ACTIVATE_USER,\n    payload\n  })\n};\nexport const loadUser = () => async (dispatch, getState) => {\n  debugger;\n  dispatch(actions.loadUserSuccess());\n  const response = await authAPI.getUser(tokenConfig(getState));\n  dispatch(actions.getUserSuccess(response.data));\n};\nexport const Logout = () => async (dispatch, getState) => {\n  dispatch(actions.loadUserSuccess());\n  await authAPI.logout(tokenConfig(getState)).then(() => dispatch(actions.logoutSuccess()));\n  dispatch(actions.loadUserSuccess());\n};\nexport const login = (email, password) => {\n  return async (dispatch, getState) => {\n    const body = JSON.stringify({\n      email,\n      password\n    });\n\n    try {\n      dispatch(actions.loadUserSuccess());\n      let response = await authAPI.login(body);\n      dispatch(actions.loginSuccess(response.data));\n      dispatch(createMessage({\n        log_in_ed: \"Logged successful\"\n      }));\n      const res = await authAPI.getUser(tokenConfig(getState));\n      dispatch(actions.getUserSuccess(res.data));\n    } catch (err) {\n      const errors = {\n        msg: err.response.data,\n        status: err.response.status\n      };\n      dispatch({\n        type: GET_ERRORS,\n        payload: errors\n      });\n    }\n\n    dispatch(actions.loadUserSuccess);\n  };\n};\nexport const register = (email, first_name, last_name, password) => async dispatch => {\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    password,\n    email\n  });\n\n  try {\n    dispatch(actions.loadUserSuccess());\n    const response = await authAPI.register(body);\n    dispatch(actions.registerSuccess(response.data));\n    dispatch({\n      type: CREATE_MESSAGE,\n      payload: {\n        registered: \"Check your email!\"\n      }\n    });\n    await profileAPI.PostProfile(response.data.id);\n    await profileAPI.PostDocuments(response.data.id);\n    dispatch(actions.loadUserSuccess);\n  } catch (err) {\n    const error = {\n      msg: err.response.data,\n      status: err.response.status\n    };\n    dispatch({\n      payload: error,\n      type: GET_ERRORS\n    });\n  }\n\n  dispatch(actions.loadUserSuccess);\n};\nexport const ActivateUser = body => async (dispatch, getState) => {\n  debugger;\n  const body1 = {\n    email: localStorage.getItem('email'),\n    password: localStorage.getItem('password')\n  };\n\n  try {\n    const response1 = await authAPI.activate(body);\n    dispatch(actions.activatedSuccessful(response1.data));\n    dispatch(actions.loadUserSuccess());\n    debugger;\n    let response = await authAPI.login(body1);\n    debugger;\n    dispatch(actions.loginSuccess(response.data));\n    dispatch({\n      type: CREATE_MESSAGE,\n      payload: {\n        log_in_ed: \"Logged successful\"\n      }\n    });\n    const res = await authAPI.getUser(tokenConfig(getState));\n    dispatch(actions.getUserSuccess(res.data));\n  } catch (err) {\n    const errors = {\n      msg: err.response.data,\n      status: err.response.status\n    };\n    dispatch({\n      type: GET_ERRORS,\n      payload: errors\n    });\n  }\n};\nexport const tokenConfig = getState => {\n  debugger;\n  const auth_token = getState().auth.auth_token;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (auth_token) {\n    config.headers['Authorization'] = `Token ${auth_token}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/seva/Desktop/textilespot-master/frontend/src/redux/reducers/AuthReducer.tsx"],"names":["GET_ERRORS","CREATE_MESSAGE","createMessage","profileAPI","authAPI","USER_LOADING","USER_LOADED","LOGIN_SUCCESS","LOGOUT_SUCCESS","REGISTER_SUCCESS","ACTIVATE_USER","initialState","auth_token","localStorage","getItem","isAuthenticated","isLoading","activated","user","JSON","parse","AuthReducer","state","action","type","payload","setItem","stringify","removeItem","email","id","first_name","actions","loadUserSuccess","loginSuccess","getUserSuccess","logoutSuccess","registerSuccess","activatedSuccessful","loadUser","dispatch","getState","response","getUser","tokenConfig","data","Logout","logout","then","login","password","body","log_in_ed","res","err","errors","msg","status","register","last_name","registered","PostProfile","PostDocuments","error","ActivateUser","body1","response1","activate","auth","config","headers"],"mappings":"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","sourcesContent":["import {GET_ERRORS} from './ErrorsReducer'\nimport {CREATE_MESSAGE} from \"./MessageReducer\";\nimport {createMessage} from './MessageReducer'\nimport {Dispatch} from \"redux\";\nimport {AppStateType, InferActionsTypes} from \"../redux_store\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {profileAPI} from \"../../api/profileApi\";\nimport {authAPI} from \"../../api/AuthApi\";\n\nexport type GetStateType = () => AppStateType\n\nconst USER_LOADING = 'USER_LOADING'\nconst USER_LOADED = 'USER_LOADED'\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS'\nconst LOGOUT_SUCCESS = 'LOGOUT_SUCCESS'\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS'\nconst ACTIVATE_USER = 'ACTIVATE_USER'\n\nexport type initialStateTypes = {\n    auth_token: any ,\n    isAuthenticated: boolean | null,\n    isLoading: boolean | null,\n    activated: number | null,\n    user: { email: string,\n    first_name: string,\n    id: number }}\n\nexport let initialState : initialStateTypes = {\n    auth_token: localStorage.getItem('auth_token'),\n    isAuthenticated: null,\n    isLoading: false,\n    activated: 0,\n    user: JSON.parse(localStorage.getItem('user') as string),\n\n}\n\nexport const AuthReducer = (state = initialState, action: AuthActionTypes): initialStateTypes => {\n\n    switch (action.type) {\n        case ACTIVATE_USER:\n            return {...state, activated: action.payload}\n        case USER_LOADING :\n            return {...state, isLoading: !state.isLoading}\n        case USER_LOADED:\n            localStorage.setItem('user', JSON.stringify(action.payload))\n            return {...state, isAuthenticated: true, isLoading: false, user: action.payload}\n        case LOGIN_SUCCESS:\n            if (action.payload.auth_token != null) {\n                localStorage.setItem('auth_token', action.payload.auth_token)\n            }\n            return {\n                ...state, ...action.payload, isAuthenticated: true, isLoading: false\n            }\n        case REGISTER_SUCCESS:\n            return {...state, auth_token:null, user:action.payload, isLoading: false}\n        case LOGOUT_SUCCESS:\n            debugger\n            localStorage.removeItem('auth_token');\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            return {...state, auth_token: null, user: {email: 'none@gmail.com', id: 0, first_name: 'none'}, isAuthenticated: false, isLoading: false}\n        default:\n            return state\n    }\n}\nexport type AuthActionTypes = InferActionsTypes<typeof actions>\nexport const actions: { [key: string]: (...args: any) => any; } = {\n    loadUserSuccess: (): AuthActionTypes => ({type: USER_LOADING}),\n    loginSuccess: (payload: { auth_token: any }): AuthActionTypes => ({type: LOGIN_SUCCESS, payload}),\n    getUserSuccess: (payload: { first_name: string, id: number, email: string }): AuthActionTypes => ({type: USER_LOADED, payload}),\n    logoutSuccess: (): AuthActionTypes => ({type: LOGOUT_SUCCESS}),\n    registerSuccess: (user: any): AuthActionTypes => ({type: REGISTER_SUCCESS, payload: user}),\n    activatedSuccessful: (payload: any): AuthActionTypes => ({type: ACTIVATE_USER, payload}),\n}\n\n\n\n\nexport const loadUser = () => async (dispatch: Dispatch<AuthActionTypes>, getState: () => AppStateType) => {\n    debugger\n    dispatch(actions.loadUserSuccess());\n\n    const response = await authAPI.getUser(tokenConfig(getState))\n    dispatch(actions.getUserSuccess(response.data));\n}\n\nexport const Logout = () =>  async (dispatch: Dispatch<AuthActionTypes>, getState: () => AppStateType) => {\n    dispatch(actions.loadUserSuccess())\n    await authAPI.logout(tokenConfig(getState)).then(() =>dispatch(actions.logoutSuccess()))\n    dispatch(actions.loadUserSuccess())\n    }\n\n\nexport const login = (email: string, password: string) => {\n    return async (dispatch: Dispatch<any>, getState: GetStateType) => {\n\n        const body = JSON.stringify({email, password})\n        try {\n            dispatch(actions.loadUserSuccess());\n            let response: any = await authAPI.login(body)\n            dispatch(actions.loginSuccess(response.data))\n            dispatch(createMessage({log_in_ed: \"Logged successful\"}))\n            const res = await authAPI.getUser(tokenConfig(getState))\n            dispatch(actions.getUserSuccess(res.data));\n\n\n        } catch (err) {\n            const errors = {\n                msg: err.response.data,\n                status: err.response.status\n            }\n            dispatch({\n                type: GET_ERRORS,\n                payload: errors\n            })\n\n\n        }\n        dispatch(actions.loadUserSuccess)\n    };\n}\n\nexport const register = (email: string, first_name: string, last_name: string, password: string): ThunkAction<Promise<void>, AppStateType, any, AuthActionTypes> => async (dispatch) => {\n\n    const body = JSON.stringify({first_name, last_name, password, email})\n    try {\n\n        dispatch(actions.loadUserSuccess());\n        const response = await authAPI.register(body)\n        dispatch(actions.registerSuccess(response.data))\n        dispatch({\n            type: CREATE_MESSAGE,\n            payload: {registered: \"Check your email!\"}})\n        await profileAPI.PostProfile(response.data.id)\n        await profileAPI.PostDocuments(response.data.id)\n        dispatch(actions.loadUserSuccess)\n    } catch (err) {\n        const error = {\n            msg: err.response.data,\n            status: err.response.status\n        }\n        dispatch({\n            payload: error,\n            type: GET_ERRORS\n        })\n    }\n    dispatch(actions.loadUserSuccess)\n}\nexport const ActivateUser = (body: any): ThunkAction<Promise<void>, AppStateType, unknown, AuthActionTypes> => async (dispatch, getState) => {\n    debugger\n    const body1 = {\n        email: localStorage.getItem('email'),\n        password: localStorage.getItem('password')}\n    try {\n        const  response1 = await authAPI.activate(body)\n        dispatch(actions.activatedSuccessful(response1.data))\n        dispatch(actions.loadUserSuccess());\n        debugger\n        let response = await authAPI.login(body1)\n        debugger\n        dispatch(actions.loginSuccess(response.data))\n        dispatch({\n            type: CREATE_MESSAGE,\n            payload: {log_in_ed: \"Logged successful\"}})\n        const res = await authAPI.getUser(tokenConfig(getState))\n        dispatch(actions.getUserSuccess(res.data));\n\n\n    } catch (err) {\n        const errors = {\n            msg: err.response.data,\n            status: err.response.status\n        }\n        dispatch({\n            type: GET_ERRORS,\n            payload: errors\n        })\n\n\n    }\n}\n\nexport const tokenConfig = (getState: GetStateType) => {\n    debugger\n    const auth_token = getState().auth.auth_token;\n\n    const config: any = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    if (auth_token) {\n        config.headers['Authorization'] = `Token ${auth_token}`;\n    }\n\n\n    return config\n}"]},"metadata":{},"sourceType":"module"}