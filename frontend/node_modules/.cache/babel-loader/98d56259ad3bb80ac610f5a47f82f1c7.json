{"ast":null,"code":"import { profileAPI } from \"../../api\";\nimport { createRMessage } from './MessageReducer';\nimport { GET_CATEGORY, GET_COUNTRIES, GET_DOCUMENTS, GET_PROFILES, GET_SEARCHED_PROFILES } from \"./ProfileTypes\";\nlet initialState = {\n  profiles: [],\n  countries: [],\n  documents: [],\n  category: []\n};\nexport const ProfileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_COUNTRIES:\n      return { ...state,\n        countries: action.payload\n      };\n\n    case GET_PROFILES:\n      return { ...state,\n        profiles: action.payload\n      };\n\n    case GET_DOCUMENTS:\n      return { ...state,\n        documents: action.payload\n      };\n\n    case GET_CATEGORY:\n      return { ...state,\n        category: action.payload\n      };\n\n    case GET_SEARCHED_PROFILES:\n      return { ...state,\n        profiles: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst getCountriesSuccessful = payload => ({\n  type: GET_COUNTRIES,\n  payload\n});\n\nconst getProfilesSuccessful = payload => ({\n  type: GET_PROFILES,\n  payload\n});\n\nconst getDocumentsSuccessful = payload => ({\n  type: GET_DOCUMENTS,\n  payload\n});\n\nconst getCategorySuccessful = payload => ({\n  type: GET_CATEGORY,\n  payload\n});\n\nconst getSearchedProfiles = payload => ({\n  type: GET_SEARCHED_PROFILES,\n  payload\n});\n\nexport const GetCountries = () => async dispatch => {\n  const response = await profileAPI.getCountries();\n  dispatch(getCountriesSuccessful(response.data));\n};\nexport const GetProfiles = () => async dispatch => {\n  const response = await profileAPI.getProfile();\n  dispatch(getProfilesSuccessful(response.data));\n};\nexport const updateManufacturer = (data, id) => async dispatch => {\n  profileAPI.PutProfile(data, id);\n  dispatch(createRMessage({\n    registered: \"Your Profile was Submitted!\"\n  }));\n};\nexport const updateDocument = (data, id) => async dispatch => {\n  profileAPI.PatchDocuments(data, id);\n  dispatch(createRMessage({\n    registered: \"Documents for your Profile were Submitted!\"\n  }));\n};\nexport const postDocument = id => async dispatch => {\n  await profileAPI.PostDocuments(id);\n  const response = await profileAPI.getDocuments();\n  dispatch(getDocumentsSuccessful(response.data));\n  dispatch(createRMessage({\n    registered: \"One more document was added\"\n  }));\n};\nexport const GetDocuments = () => async dispatch => {\n  debugger;\n  const response = await profileAPI.getDocuments();\n  dispatch(getDocumentsSuccessful(response.data));\n};\nexport const GetCategory = () => async dispatch => {\n  const response = await profileAPI.getCategory();\n  dispatch(getCategorySuccessful(response.data));\n};\nexport const GetSearchedData = search => async dispatch => {\n  debugger;\n  const response = await profileAPI.getSearcheddData(search);\n  dispatch(getSearchedProfiles(response.data));\n};","map":{"version":3,"sources":["/home/seva/Desktop/textilespot-master/frontend/src/redux/reducers/ProfileReducer.tsx"],"names":["profileAPI","createRMessage","GET_CATEGORY","GET_COUNTRIES","GET_DOCUMENTS","GET_PROFILES","GET_SEARCHED_PROFILES","initialState","profiles","countries","documents","category","ProfileReducer","state","action","type","payload","getCountriesSuccessful","getProfilesSuccessful","getDocumentsSuccessful","getCategorySuccessful","getSearchedProfiles","GetCountries","dispatch","response","getCountries","data","GetProfiles","getProfile","updateManufacturer","id","PutProfile","registered","updateDocument","PatchDocuments","postDocument","PostDocuments","getDocuments","GetDocuments","GetCategory","getCategory","GetSearchedData","search","getSearcheddData"],"mappings":"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","sourcesContent":["import { profileAPI } from \"../../api\"\nimport { createRMessage} from './MessageReducer'\nimport {ProfileActionTypes, GET_CATEGORY, GET_COUNTRIES, GET_DOCUMENTS, GET_PROFILES, GET_SEARCHED_PROFILES} from \"./ProfileTypes\";\n\ntype initialStateType =  {\n    profiles: any ,\n    countries: any,\n    documents: any,\n    category: any\n}\n\nlet initialState: initialStateType = {\n    profiles: [],\n    countries: [],\n    documents: [],\n    category: []\n};\n\nexport const ProfileReducer = (state = initialState, action: ProfileActionTypes) => {\n    switch (action.type){\n        case GET_COUNTRIES:\n            return{...state, countries: action.payload}\n        case GET_PROFILES:\n            return {...state, profiles:  action.payload}\n        case GET_DOCUMENTS:\n            return {...state, documents:  action.payload}\n        case GET_CATEGORY:\n            return {...state, category: action.payload}\n        case GET_SEARCHED_PROFILES:\n            return {...state, profiles:  action.payload}\n        default: \n            return state \n         }\n    }\n\nconst getCountriesSuccessful = (payload: any) => ({type: GET_COUNTRIES, payload})\nconst getProfilesSuccessful = (payload: Array<{\n        id: number,\n        companyProfilePicture: string,\n        companyName: string,\n        companyDescription: string,\n        country: string,\n        companyLogo: string,\n        sections: string,\n        owner: number\n}>) => ({type: GET_PROFILES, payload})\nconst getDocumentsSuccessful = (payload: [{\n        id: number,\n        Title: string,\n        Thumbnail: string,\n        Download: string,\n        owner: number\n}]) => ({type: GET_DOCUMENTS, payload})\nconst getCategorySuccessful = (payload: Array<{\n        id: number,\n        Name: string\n}>) => ({type: GET_CATEGORY, payload})\nconst getSearchedProfiles = (payload: [{\n        id: number,\n        companyProfilePicture: string,\n        companyName: string,\n        companyDescription: string,\n        country: string,\n        companyLogo: string,\n        sections: string,\n        owner: number\n}]) => ({type: GET_SEARCHED_PROFILES, payload})\n\nexport const GetCountries = () => async(dispatch: any) => {\n    const response = await profileAPI.getCountries()\n    dispatch(getCountriesSuccessful(response.data))\n}\n\nexport const GetProfiles = () => async(dispatch: any) => {\n    const response = await profileAPI.getProfile()\n    dispatch(getProfilesSuccessful(response.data))\n}\nexport const updateManufacturer = (data: any, id: number) => async (dispatch: any) => {\n    profileAPI.PutProfile(data, id)\n    dispatch(\n            createRMessage({registered: \"Your Profile was Submitted!\"}))\n}\nexport const updateDocument = (data: any, id: number) => async (dispatch: any) => {\n    profileAPI.PatchDocuments(data, id)\n    dispatch(createRMessage({registered: \"Documents for your Profile were Submitted!\"}))\n\n}\nexport const postDocument = (id: number) => async (dispatch: any) => {\n    await profileAPI.PostDocuments(id)\n    const response = await profileAPI.getDocuments()\n    dispatch(getDocumentsSuccessful(response.data))\n    dispatch(createRMessage({registered: \"One more document was added\"}))\n\n}\nexport const GetDocuments = () => async(dispatch: any) => {\n    debugger\n    const response = await profileAPI.getDocuments()\n    dispatch(getDocumentsSuccessful(response.data))\n}\n\nexport const GetCategory = () => async(dispatch: any) => {\n    const response = await profileAPI.getCategory()\n    dispatch(getCategorySuccessful(response.data))\n}\n\nexport const GetSearchedData = (search: string) => async(dispatch: any) => {\n    debugger\n    const response = await profileAPI.getSearcheddData(search)\n    dispatch(getSearchedProfiles(response.data))\n}"]},"metadata":{},"sourceType":"module"}