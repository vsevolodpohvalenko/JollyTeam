{"ast":null,"code":"import * as axios from 'axios';\n\nlet csrfcookie = function () {\n  // for django csrf protection\n  let cookieValue = null,\n      name = \"csrftoken\";\n\n  if (document.cookie && document.cookie !== \"\") {\n    let cookies = document.cookie.split(\";\");\n\n    for (let i = 0; i < cookies.length; i++) {\n      let cookie = cookies[i].trim();\n\n      if (cookie.substring(0, name.length + 1) == name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n};\n\nconst instance = axios.create({\n  baseURL: 'http://127.0.0.1:8000/',\n  headers: {\n    \"X-CSRFToken\": csrfcookie()\n  }\n});\nexport const faqAPI = {\n  getFaq_Group: () => {\n    return instance('api/faq_group/');\n  },\n  getFaq_Item: () => {\n    return instance.get('api/faq_item');\n  },\n  active_Item: item => {\n    return instance.put(`api/faq_item/${item.id}/`, {\n      Group: item.Group,\n      Title: item.Title,\n      Answer: item.Answer,\n      Active: item.Active\n    });\n  }\n};\nexport const authAPI = {\n  getUser: tokenConfig => {\n    return instance.get('rest-auth/user/', tokenConfig);\n  },\n  login: (body, config) => {\n    return instance.post('rest-auth/login/', {\n      email: body.email,\n      password: body.password\n    }, config);\n  },\n  logout: tokenConfig => {\n    return instance.post('rest-auth/logout/', null, tokenConfig);\n  },\n  register: (body, config) => {\n    return instance.post('rest-auth/registration/', body, config);\n  }\n};","map":{"version":3,"sources":["/home/vsevolod/Desktop/TextileSpot. API/client/textilespot./src/api.js"],"names":["axios","csrfcookie","cookieValue","name","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","instance","create","baseURL","headers","faqAPI","getFaq_Group","getFaq_Item","get","active_Item","item","put","id","Group","Title","Answer","Active","authAPI","getUser","tokenConfig","login","body","config","post","email","password","logout","register"],"mappings":"AAAA,OAAQ,KAAMA,KAAd,MAAyB,OAAzB;;AAEA,IAAIC,UAAU,GAAG,YAAW;AAAG;AAC3B,MAAIC,WAAW,GAAG,IAAlB;AAAA,MACIC,IAAI,GAAG,WADX;;AAEA,MAAIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;AAC3C,QAAIC,OAAO,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,UAAIH,MAAM,GAAGC,OAAO,CAACE,CAAD,CAAP,CAAWE,IAAX,EAAb;;AACA,UAAIL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBR,IAAI,CAACM,MAAL,GAAc,CAAlC,KAAyCN,IAAI,GAAG,GAApD,EAA0D;AACtDD,QAAAA,WAAW,GAAGU,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBR,IAAI,CAACM,MAAL,GAAc,CAA/B,CAAD,CAAhC;AACA;AACH;AACJ;AACJ;;AACD,SAAOP,WAAP;AACH,CAdD;;AAgBA,MAAMW,QAAQ,GAAIb,KAAK,CAACc,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAE,wBADkB;AAE3BC,EAAAA,OAAO,EAAG;AAAC,mBAAef,UAAU;AAA1B;AAFiB,CAAb,CAAlB;AAOA,OAAO,MAAMgB,MAAM,GAAI;AACnBC,EAAAA,YAAY,EAAE,MAAI;AACd,WAAOL,QAAQ,CAAC,gBAAD,CAAf;AAAkC,GAFnB;AAGnBM,EAAAA,WAAW,EAAE,MAAK;AACd,WAAON,QAAQ,CAACO,GAAT,CAAa,cAAb,CAAP;AAAoC,GAJrB;AAKnBC,EAAAA,WAAW,EAAGC,IAAD,IAAU;AACnB,WAAOT,QAAQ,CAACU,GAAT,CAAc,gBAAeD,IAAI,CAACE,EAAG,GAArC,EAAyC;AAC5CC,MAAAA,KAAK,EAAEH,IAAI,CAACG,KADgC;AAE5CC,MAAAA,KAAK,EAAEJ,IAAI,CAACI,KAFgC;AAG5CC,MAAAA,MAAM,EAAEL,IAAI,CAACK,MAH+B;AAI5CC,MAAAA,MAAM,EAAEN,IAAI,CAACM;AAJ+B,KAAzC,CAAP;AAMP;AAZsB,CAAhB;AAaP,OAAO,MAAMC,OAAO,GAAG;AACnBC,EAAAA,OAAO,EAAGC,WAAD,IAAiB;AACtB,WAAOlB,QAAQ,CAACO,GAAT,CAAa,iBAAb,EAAgCW,WAAhC,CAAP;AACH,GAHkB;AAInBC,EAAAA,KAAK,EAAE,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACrB,WAAOrB,QAAQ,CAACsB,IAAT,CAAc,kBAAd,EAAkC;AACrCC,MAAAA,KAAK,EAAEH,IAAI,CAACG,KADyB;AAErCC,MAAAA,QAAQ,EAAEJ,IAAI,CAACI;AAFsB,KAAlC,EAGJH,MAHI,CAAP;AAIH,GATkB;AAUnBI,EAAAA,MAAM,EAAGP,WAAD,IAAiB;AACrB,WAAOlB,QAAQ,CAACsB,IAAT,CAAc,mBAAd,EAAmC,IAAnC,EAAyCJ,WAAzC,CAAP;AACH,GAZkB;AAanBQ,EAAAA,QAAQ,EAAE,CAACN,IAAD,EAAOC,MAAP,KAAkB;AACxB,WAAOrB,QAAQ,CAACsB,IAAT,CAAc,yBAAd,EAAyCF,IAAzC,EAA+CC,MAA/C,CAAP;AACH;AAfkB,CAAhB","sourcesContent":["import  * as  axios from 'axios'\n\nlet csrfcookie = function() {  // for django csrf protection\n    let cookieValue = null,\n        name = \"csrftoken\";\n    if (document.cookie && document.cookie !== \"\") {\n        let cookies = document.cookie.split(\";\");\n        for (let i = 0; i < cookies.length; i++) {\n            let cookie = cookies[i].trim();\n            if (cookie.substring(0, name.length + 1) == (name + \"=\")) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n};\n\nconst instance =  axios.create({\n    baseURL: 'http://127.0.0.1:8000/',\n    headers : {\"X-CSRFToken\": csrfcookie()}\n    \n    \n});\n\nexport const faqAPI =  {\n    getFaq_Group: ()=>{\n        return instance('api/faq_group/')},\n    getFaq_Item: ()=> {\n        return instance.get('api/faq_item')},\n    active_Item: (item) => {\n        return instance.put(`api/faq_item/${item.id}/`, {\n            Group: item.Group,\n            Title: item.Title,\n            Answer: item.Answer,\n            Active: item.Active,\n        })\n}}\nexport const authAPI = {\n    getUser: (tokenConfig) => {\n        return instance.get('rest-auth/user/', tokenConfig)\n    },\n    login: (body, config) => {\n        return instance.post('rest-auth/login/', {\n            email: body.email,\n            password: body.password\n        }, config)\n    },\n    logout: (tokenConfig) => {\n        return instance.post('rest-auth/logout/', null, tokenConfig)\n    },\n    register: (body, config) => {\n        return instance.post('rest-auth/registration/', body, config)\n    }\n}"]},"metadata":{},"sourceType":"module"}